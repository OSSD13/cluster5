
@extends('layouts.main')

@section('title', 'Point of Interest')

@php
    $user = session('user');
@endphp

@if ($user && $user->role_name === 'ceo')

@section('content')
    <!-- <form method="POST" action="{{ route('logout') }}">
            @csrf -->
    <div class="bg-white shadow-lg rounded-lg p-6 w-full max-w-md mx-auto">
        <!-- Header -->
        <div class="flex justify-between items-center mb-3">
            <h2 class="text-lg font-bold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
            <button class="bg-blue-500 hover:bg-blue-700 text-white border border-gray-400 font-bold py-2 px-4 rounded" style="background-color: #3062B8" onclick="addMember()" >
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </button>
        </div>

        <!-- Search Input -->
        <input type="text" id="searchInput" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó" class="w-full p-2 border border-gray-300 rounded mb-3">

        <!-- Dropdown: Sale Supervisor -->
        <div class="mb-3">
            <label class="block text-gray-600 mb-1">Sale Supervisor</label>
            <select id="supervisorSelect" class="w-full p-2 border border-gray-300 rounded">
                <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
            </select>
        </div>


        <!-- Dropdown: Role -->
        <div class="mb-3">
            <label class="block text-gray-600 mb-1">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</label>
            <select id="roleSelect" class="w-full p-2 border border-gray-300 rounded">
                <option value="" selected  >‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                <option value="Sale">Sale</option>
                <option value="supervisor">Sale Supervisor</option>
                <option value="CEO">CEO</option>
            </select>
        </div>


        <!-- Result Count -->
        <p class="text-gray-700" id="resultCount">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
    </div>


    <!-- **************************************************************************** -->

<!-- Pagination Controls -->
<div class="overflow-x-auto">
    <table class="w-full mt-5 border-collapse rounded-lg">
        <thead class="text-gray-800 text-md" style="background-color: #B5CFF5">
            <tr>
                <th scope="col" class="py-2 px-4 text-left">ID</th>
                <th class="py-3 px-4 text-left min-w-[200px]">‡∏ä‡∏∑‡πà‡∏≠ / ‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                <th class="py-3 px-4 text-center max-w-[150px]">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</th>
                <th class="py-3 px-1 w-7 text-center">&#8230;</th>
              </tr>
        </thead>

        <tbody id="tableBody" class="bg-white divide-y divide-gray-200 text-sm"></tbody>
    </table>
</div>

<!-- Pagination Controls -->
<div class="flex justify-center items-center mt-4 space-x-2" id="pagination"></div>

<!-- contextMenu Controls-->
<div id="contextMenu" class="hidden absolute bg-white shadow-lg rounded-lg w-32 z-50 p-2 space-y-2"></div>

<script>
    let members = [];
    let currentPage = 1;
    const rowsPerPage = 10;
    let totalMembers = 0;
    let currentSort = { column: 'id', ascending: true };
    let searchTimeout; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°

    function fetchMembers() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(async() => {
        
        const search = document.getElementById("searchInput").value || '';
        const supervisorSelect = document.getElementById("supervisorSelect");
        const selectedSupervisor = supervisorSelect.value; // üí° ‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ

        const role = document.getElementById("roleSelect").value || '';
        const supervisorId = selectedSupervisor || '';

        let query = `?page=${currentPage}&limit=${rowsPerPage}&search=${encodeURIComponent(search)}&role=${encodeURIComponent(role)}`;
        if (supervisorId) {
            query += `&target=${supervisorId}`;
        }

        try {
            const response = await fetch(`{{ route('api.user.query') }}${query}`);
            const result = await response.json();
            members = result.data || [];
            totalMembers = result.total || 0;

            document.getElementById("resultCount").textContent = `‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ${totalMembers} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;

            populateSupervisorDropdownFromArray(supervisorId);
            renderTable();
            renderPagination(totalMembers);
        } catch (error) {
            console.error("Error fetching members:", error);
        }
        
    }, 300); //  debounce 300ms
    }

    function renderTable(data = members) {
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";

        data.forEach((member) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td class="py-3 px-4 w-16 text-md">${member.user_id}</td>
                <td class="py-3 px-4 max-w-[200px]">
                    <div class="font-semibold text-md" title="${member.name}">${member.name}</div>
                    <div class="text-sm text-gray-400 truncate" title="${member.email}">${member.email}</div>
                </td>
                <td class="py-3 px-4 w-32 truncate text-center text-md" title="${member.role_name}">${member.role_name}</td>
                <td class="py-3 px-1 w-10 text-center relative">
                    <button onclick="toggleMenu(event, ${member.user_id})">&#8230;</button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }


    function renderPagination(totalItems) {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        const totalPages = Math.ceil(totalItems / rowsPerPage);
        const maxVisible = 1;
        let startPage = Math.max(1, currentPage - maxVisible);
        let endPage = Math.min(totalPages, currentPage + maxVisible);

        if (totalPages <= 1) return;

        const createPageButton = (page, isActive = false) => {
            const btn = document.createElement("button");
            btn.innerText = page;
            btn.className = `min-w-[36px] h-10 px-3 mx-1 rounded-lg text-sm font-medium ${isActive ? "bg-blue-600 text-white" : "bg-white border border-gray-300 text-black hover:bg-gray-100"}`;
            btn.onclick = () => goToPage(page);
            return btn;
        };

        const createEllipsis = () => {
            const btn = document.createElement("button");
            btn.innerText = "...";
            btn.className = "px-3 text-gray-500 hover:text-black rounded hover:bg-gray-100";
            btn.onclick = () => {
                Swal.fire({
                    title: "‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà...",
                    input: "number",
                    inputLabel: `‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ (1 - ${totalPages})`,
                    inputAttributes: { min: 1, max: totalPages, step: 1 },
                    showCancelButton: true,
                    confirmButtonText: "‡πÑ‡∏õ‡πÄ‡∏•‡∏¢!",
                    confirmButtonColor: "#3062B8",
                    inputValidator: (value) => {
                        if (!value || isNaN(value)) return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç";
                        if (value < 1 || value > totalPages) return `‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á ${totalPages}`;
                        return null;
                    }
                }).then(result => {
                    if (result.isConfirmed) goToPage(parseInt(result.value));
                });
            };
            return btn;
        };

        const prevBtn = document.createElement("button");
        prevBtn.innerHTML = "&lt;";
        prevBtn.className = `min-w-[40px] h-10 px-3 mx-1 rounded-lg text-xl font-bold ${currentPage === 1 ? "text-gray-300 bg-white border border-gray-200 cursor-not-allowed" : "text-blue-600 bg-white border border-gray-300 hover:bg-blue-50"}`;
        prevBtn.disabled = currentPage === 1;
        prevBtn.onclick = () => goToPage(currentPage - 1);
        pagination.appendChild(prevBtn);

        if (startPage > 1) {
            pagination.appendChild(createPageButton(1));
            if (startPage > 2) pagination.appendChild(createEllipsis());
        }

        for (let i = startPage; i <= endPage; i++) {
            pagination.appendChild(createPageButton(i, i === currentPage));
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) pagination.appendChild(createEllipsis());
            pagination.appendChild(createPageButton(totalPages));
        }

        const nextBtn = document.createElement("button");
        nextBtn.innerHTML = "&gt;";
        nextBtn.className = `min-w-[40px] h-10 px-3 mx-1 rounded-lg text-xl font-bold ${currentPage === totalPages ? "text-gray-300 bg-white border border-gray-200 cursor-not-allowed" : "text-blue-600 bg-white border border-gray-300 hover:bg-blue-50"}`;
        nextBtn.disabled = currentPage === totalPages;
        nextBtn.onclick = () => goToPage(currentPage + 1);
        pagination.appendChild(nextBtn);
    }

    function goToPage(pageNumber) {
        currentPage = pageNumber;
        fetchMembers();
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    function sortTable(column) {
        if (currentSort.column === column) {
            currentSort.ascending = !currentSort.ascending;
        } else {
            currentSort.column = column;
            currentSort.ascending = true;
        }
        members.sort((a, b) => (a[column] < b[column] ? (currentSort.ascending ? -1 : 1) : (a[column] > b[column] ? (currentSort.ascending ? 1 : -1) : 0)));
        renderTable();
    }

    let supervisors = [];
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Supervisor
    function populateSupervisorDropdownFromArray(preserveValue = "") {
        const supervisorSelect = document.getElementById("supervisorSelect");

        supervisorSelect.innerHTML = `<option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>`; // default option

        supervisors.forEach(sup => {
            const option = document.createElement("option");
            option.value = sup.user_id;
            option.textContent = `${sup.name} - ${sup.email}`;
            supervisorSelect.appendChild(option);
        });

        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        supervisorSelect.value = preserveValue;
    }

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å API
    document.addEventListener("DOMContentLoaded", async () => {
        try {
            const response = await fetch("{{ route('api.user.query.all') }}?role=supervisor");
            const result = await response.json();
            supervisors = result.data || [];

            populateSupervisorDropdownFromArray(); // ‡πÄ‡∏ï‡∏¥‡∏° dropdown ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
            fetchMembers(); // ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ fetch ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener
            document.getElementById("searchInput").addEventListener("input", fetchMembers);
            document.getElementById("supervisorSelect").addEventListener("change", fetchMembers);
            document.getElementById("roleSelect").addEventListener("change", fetchMembers);
        } catch (e) {
            console.error("‡πÇ‡∏´‡∏•‡∏î supervisor ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", e);
        }
    });

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° "Meatballbar"
    let activeMenuId = null;
    function toggleMenu(event, id) {
        event.stopPropagation();

        const menu = document.getElementById("contextMenu");
        const button = event.currentTarget;
        const parentCell = button.closest('td');

        if (activeMenuId === id && !menu.classList.contains("hidden")) {
            menu.classList.add("hidden");
            activeMenuId = null;
            return;
        }

        activeMenuId = id;

        menu.innerHTML = `
            <button class="block w-full px-4 py-2 text-white border border-gray-400 bg-blue-600 rounded-lg hover:bg-blue-700 whitespace-nowrap" style="background-color: #3062B8" 
                onclick="document.getElementById('contextMenu').classList.add('hidden'); activeMenuId = null; viewDetail(${id})">
                ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </button>
            <button class="block w-full px-4 py-2 text-white border border-gray-400 bg-blue-600 rounded-lg hover:bg-blue-700" style="background-color: #3062B8" 
                onclick="document.getElementById('contextMenu').classList.add('hidden'); activeMenuId = null; editMember(${id})">
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
            <button class="block w-full px-4 py-2 text-white border border-gray-400 bg-red-600 rounded-lg hover:bg-red-700" style="background-color: #CF3434" 
                onclick="document.getElementById('contextMenu').classList.add('hidden'); activeMenuId = null; deleteMember(${id})">
                ‡∏•‡∏ö
            </button>
        `;

        menu.classList.remove("hidden");

        // **‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ offsetWidth ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**
        menu.classList.remove("hidden");

        document.addEventListener("click", function () {
        const menu = document.getElementById("contextMenu");
        if (!menu.classList.contains("hidden")) {
            menu.classList.add("hidden");
            activeMenuId = null;
        }
});


        // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
        const top = parentCell.offsetTop + parentCell.offsetHeight - 120; // ‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏ô‡∏¥‡∏î (4px)
        const left = parentCell.offsetLeft + parentCell.offsetWidth - menu.offsetWidth;

        menu.style.position = "absolute";
        menu.style.top = `${top}px`;
        menu.style.left = `${left}px`;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° z-index ‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ó‡∏±‡∏ö
        menu.style.zIndex = "5"; // ‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
function viewDetail(id) {
    const member = members.find(item => item.user_id === id);

    let supervisorInfo = "";
    if (member.role_name.toLowerCase() === "sale") {
        let supervisorLabel = "‡πÑ‡∏°‡πà‡∏û‡∏ö Supervisor";
        if (member.manager) {
            const supervisor = supervisors.find(sup => sup.user_id === member.manager);
            if (supervisor) {
                supervisorLabel = `${supervisor.name} - ${supervisor.email}`;
            }
        }
        supervisorInfo = `
            <div class="w-full">
                <label class="font-semibold text-gray-800 text-sm">Sales Supervisor</label>
                <input type="text" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" 
                    value="${supervisorLabel}" readonly>
            </div>`;
    }


    Swal.fire({
        html: `
            <div class="flex flex-col text-3xl mb-6 mt-4">
                 <b class=text-gray-800>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</b>
            </div>
            <div class="flex flex-col space-y-2 text-left">
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</label>
                    <input type="text" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.name}" readonly>
                </div>
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                    <input type="text" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.email}" readonly>
                </div>
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°</label>
                    <input type="text" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${formatThaiDate(member.created_at)}" readonly>
                </div>
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</label>
                    <input type="text" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.role_name}" readonly>
                </div>
                ${supervisorInfo}
            </div>`,
        customClass: { popup: 'custom-popup' },
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        confirmButtonColor: "#2D8C42",
    });
}

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    function formatThaiDate(dateStr) {
            if (!dateStr) return '-';
            const date = new Date(dateStr);
            return date.toLocaleDateString("th-TH", {
                year: "numeric",
                month: "short",
                day: "numeric"
            });
        }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
    function addMember() {
        Swal.fire({

            html: 
                `
                <div class="flex flex-col items-center mb-1">
                    <span class="iconify" data-icon="material-symbols-light:edit-square-rounded" data-width="70" data-height="70"></span>
                </div>
                <div class="flex flex-col text-3xl mb-6 mt-4">
                     <b class=text-gray-800 >‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</b>
                 </div>
                <div class="flex flex-col space-y-2 text-left">
                    <div class="w-full">
                        <label class="font-semibold text-gray-800 text-sm">Email</label>
                        <input type="email" id="memberEmail" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" >
                    </div>
                <div class="w-full">
                    <label class="font-semibold text-gray-800 text-sm">Password</label>
                    <input type="password" id="memberPassword" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" >
                </div>
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                    <input type="text" id="memberName" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm">
                </div>
                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</label>
                    <select id="memberRole" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" onchange="toggleSupervisor()">
                        <option value="" selected disabled class="hidden">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó --</option>
                        <option value="sale">Sale</option>
                        <option value="ceo">CEO</option>
                        <option value="supervisor">Sale Supervisor</option>
                    </select>
                </div>
                <div class="w-full">
                    <!-- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sale -->
                    <div id="supervisorSection" style="display: none;" class="mt-4">
                        <label class="font-medium text-gray-800 text-sm">Sales supervisor</label>
                        <select id="supervisorDropdown" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm">
                            <option value="" selected disabled>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sales Supervisor</option>
                            ${members.filter(member => member.role === 'supervisor').map(supervisor => 
                                `<option value="${supervisor.user_id}">${supervisor.name} - ${supervisor.email}</option>`
                            ).join('')}
                        </select>
                    </div>
                </div>
                </div>
                </div>`,
            showCancelButton: true,
            confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
            cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            confirmButtonColor: "#2D8C42",
            focusCancel: true,
            customClass: {
                actions: "flex justify-between w-full px-4",
                cancelButton: "ml-0",
                confirmButton: "mr-0",
            },
            preConfirm: async () => {
            const email = document.getElementById("memberEmail").value;
            const password = document.getElementById("memberPassword").value;
            const name = document.getElementById("memberName").value;
            const role = document.getElementById("memberRole").value;

            let manager = null;
            if (role === "sale") {
                manager = document.getElementById("supervisorDropdown").value;
            }

            try {
                const response = await fetch("{{ route('api.user.create') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": document.querySelector('meta[name=\"csrf-token\"]').content
                    },
                    body: JSON.stringify({
                        email,
                        password,
                        name,
                        role_name: role,
                        user_status: "normal",
                        manager: manager ? parseInt(manager) : null
                    })
                });

                const result = await response.json();

                if (!response.ok) {
                    
                    if (result?.errors) {
                        const errorMessages = Object.values(result.errors).flat().join('<br>');
                        Swal.showValidationMessage(errorMessages);
                    } else {
                        Swal.showValidationMessage(result?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
                    }
                    return false;
                }

                Swal.fire({
                    title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                    text: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                    icon: "success",
                    confirmButtonColor: "#2D8C42",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
                });

                fetchMembers();

            } catch (error) {
                console.error("Add user error:", error);
                Swal.showValidationMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ");
            }
        }


        });
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô Sales Supervisor dropdown
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î supervisor ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async function toggleSupervisor(selectedId = null) {
        const role = document.getElementById("memberRole").value;
        const section = document.getElementById("supervisorSection");
        const dropdown = document.getElementById("supervisorDropdown");

        if (role === "sale") {
            section.style.display = "block";
            dropdown.innerHTML = `<option value="" disabled selected hidden>-- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Supervisor... --</option>`;

            try {
                const response = await fetch("{{ route('api.user.query.all') }}?role=supervisor");
                const result = await response.json();
                const supervisors = result.data || [];

                dropdown.innerHTML = `<option value="" disabled selected hidden>-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Supervisor --</option>`;
                supervisors.forEach(sup => {
                    const option = document.createElement("option");
                    option.value = sup.user_id;
                    option.textContent = `${sup.name} - ${sup.email}`;
                    dropdown.appendChild(option);
                });

                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ selectedId ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏•‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                if (selectedId) {
                    dropdown.value = selectedId;
                }

            } catch (error) {
                console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î supervisor:", error);
                dropdown.innerHTML = `<option value="">‡πÇ‡∏´‡∏•‡∏î supervisor ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</option>`;
            }
        } else {
            section.style.display = "none";
            dropdown.innerHTML = "";
        }
    }



    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    async function editMember(id) {
    const member = members.find(item => item.user_id === id);

    const result = await Swal.fire({
        html: `
            <div class="flex flex-col items-center mb-1">
                <span class="iconify" data-icon="material-symbols-light:edit-square-rounded" data-width="70" data-height="70"></span>
            </div>
            <div class="flex flex-col text-3xl mb-6 mt-4">
                <b class="text-gray-800">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</b>
            </div>
            <div class="flex flex-col space-y-2 text-left">
                <div class="w-full">
                    <label class="font-semibold text-gray-800 text-sm">Email</label>
                    <input type="email" id="memberEmail" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.email}">
                </div>

                <div class="w-full">
                    <label class="font-semibold text-gray-800 text-sm">Password</label>
                    <input type="password" id="memberPassword" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.password}">
                </div>

                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                    <input type="text" id="memberName" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm" value="${member.name}">
                </div>

                <div class="w-full">
                    <label class="font-medium text-gray-800 text-sm">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó</label>
                    <select id="memberRole" onchange="toggleSupervisor()" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm">
                        <option value="sale" ${member.role_name === 'sale' ? 'selected' : ''}>Sale</option>
                        <option value="ceo" ${member.role_name === 'ceo' ? 'selected' : ''}>CEO</option>
                        <option value="supervisor" ${member.role_name === 'supervisor' ? 'selected' : ''}>Sale Supervisor</option>
                    </select>
                </div>
                 
                <div class="w-full">
                    <div id="supervisorSection" style="display: ${member.role_name === 'sale' ? 'block' : 'none'};" class="mt-4">
                        <label class="font-semibold text-gray-800 text-sm">Sales Supervisor</label>
                        <select id="supervisorDropdown" class="w-full h-10 text-sm px-3 text-gray-800 border border-gray-300 rounded-md shadow-sm">
                            <!-- options ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏î‡∏¢ toggleSupervisor() -->
                        </select>
                    </div>
                </div>
            </div>
        `,
        didOpen: async () => {
            if (member.role_name === "sale") {
                await toggleSupervisor(member.manager);
            } else {
                toggleSupervisor();
            }
        }
        ,
        showCancelButton: true,
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        confirmButtonColor: "#2D8C42",
        focusCancel: true,
        customClass: {
            actions: "flex justify-between w-full px-4",
            cancelButton: "ml-0",
            confirmButton: "mr-0",
        },
        preConfirm: async () => {
            const email = document.getElementById("memberEmail").value;
            const name = document.getElementById("memberName").value;
            const password = document.getElementById("memberPassword").value;
            const role = document.getElementById("memberRole").value;

            if (!email || !name || !role) {
                Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
                return false;
            }

            let manager = null;
            if (role === "sale") {
                manager = document.getElementById("supervisorDropdown").value;
                if (!manager) {
                    Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sales Supervisor");
                    return false;
                }
            } else {
                manager = null
            }

            try {
                const response = await fetch("{{ route('api.user.edit') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
                    },
                    body: JSON.stringify({
                        user_id: id,
                        email: email,
                        name: name,
                        password: password || undefined,
                        role_name: role,
                        manager: manager ? parseInt(manager) : null,
                        user_status: "normal"
                    })
                });

                const result = await response.json();

                if (!response.ok) {
                    const errorMsg = result?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
                    Swal.showValidationMessage(errorMsg);
                    return false;
                }

                Swal.fire({
                    title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                    text: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                    icon: "success",
                    confirmButtonColor: "#2D8C42",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
                });

                fetchMembers();
            } catch (error) {
                Swal.showValidationMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API");
                console.error("Edit API error:", error);
                return false;
            }
        }

    });
}

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    function deleteMember(id) {
    Swal.fire({
        title: "‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
        text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        icon: "warning",
        iconColor: "#d33",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#6c757d",
        confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch("{{ route('api.user.delete') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": document.querySelector('meta[name=\"csrf-token\"]').content 
                    },
                    body: JSON.stringify({
                        user_id: id
                    })
                });

                const result = await response.json();

                if (!response.ok) {
                    Swal.fire({
                        title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                        text: result.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
                        icon: "error"
                    });
                    return;
                }

                Swal.fire({
                    title: "‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!",
                    text: "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
                    icon: "success",
                    confirmButtonColor: "#2D8C42"
                });

                fetchMembers(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

            } catch (error) {
                console.error("‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å error:", error);
                Swal.fire({
                    title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                    text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ",
                    icon: "error"
                });
            }
        }
    });
}


    renderTable();
   
</script>

@endsection

@else
    @section('content')
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                Swal.fire({
                    icon: 'error',
                    title: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ',
                    text: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CEO ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ',
                    confirmButtonText: '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard',
                    confirmButtonColor: '#3062B8',
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = "{{ route('dashboard') }}";
                    }
                });
            });
        </script>
    @endsection
@endif
